/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bool,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type Multisig = Account<MultisigAccountData>;

export type MultisigAccountData = {
  m: number;
  n: number;
  isInitialized: boolean;
  signers: Array<PublicKey>;
};

export type MultisigAccountDataArgs = MultisigAccountData;

export function getMultisigAccountDataSerializer(): Serializer<
  MultisigAccountDataArgs,
  MultisigAccountData
> {
  return struct<MultisigAccountData>(
    [
      ['m', u8()],
      ['n', u8()],
      ['isInitialized', bool()],
      ['signers', array(publicKeySerializer(), { size: 11 })],
    ],
    { description: 'MultisigAccountData' }
  ) as Serializer<MultisigAccountDataArgs, MultisigAccountData>;
}

export function deserializeMultisig(rawAccount: RpcAccount): Multisig {
  return deserializeAccount(rawAccount, getMultisigAccountDataSerializer());
}

export async function fetchMultisig(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Multisig> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Multisig');
  return deserializeMultisig(maybeAccount);
}

export async function safeFetchMultisig(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Multisig | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeMultisig(maybeAccount) : null;
}

export async function fetchAllMultisig(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Multisig[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Multisig');
    return deserializeMultisig(maybeAccount);
  });
}

export async function safeFetchAllMultisig(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Multisig[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeMultisig(maybeAccount as RpcAccount));
}

export function getMultisigGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'splToken',
    'TTTXzBCbNAJ7sJZErBkpdsgLWgwgR9gx6tud8m34YXb'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      m: number;
      n: number;
      isInitialized: boolean;
      signers: Array<PublicKey>;
    }>({
      m: [0, u8()],
      n: [1, u8()],
      isInitialized: [2, bool()],
      signers: [3, array(publicKeySerializer(), { size: 11 })],
    })
    .deserializeUsing<Multisig>((account) => deserializeMultisig(account))
    .whereSize(355);
}

export function getMultisigSize(): number {
  return 355;
}
