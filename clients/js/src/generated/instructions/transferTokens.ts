/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type TransferTokensInstructionAccounts = {
  source: PublicKey | Pda;
  destination: PublicKey | Pda;
  authority?: Signer;
};

// Data.
export type TransferTokensInstructionData = {
  discriminator: number;
  amount: bigint;
};

export type TransferTokensInstructionDataArgs = { amount: number | bigint };

export function getTransferTokensInstructionDataSerializer(): Serializer<
  TransferTokensInstructionDataArgs,
  TransferTokensInstructionData
> {
  return mapSerializer<
    TransferTokensInstructionDataArgs,
    any,
    TransferTokensInstructionData
  >(
    struct<TransferTokensInstructionData>(
      [
        ['discriminator', u8()],
        ['amount', u64()],
      ],
      { description: 'TransferTokensInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 3 })
  ) as Serializer<
    TransferTokensInstructionDataArgs,
    TransferTokensInstructionData
  >;
}

// Args.
export type TransferTokensInstructionArgs = TransferTokensInstructionDataArgs;

// Instruction.
export function transferTokens(
  context: Pick<Context, 'identity' | 'programs'>,
  input: TransferTokensInstructionAccounts & TransferTokensInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'splToken',
    'TTTXzBCbNAJ7sJZErBkpdsgLWgwgR9gx6tud8m34YXb'
  );

  // Accounts.
  const resolvedAccounts: ResolvedAccountsWithIndices = {
    source: { index: 0, isWritable: true, value: input.source ?? null },
    destination: {
      index: 1,
      isWritable: true,
      value: input.destination ?? null,
    },
    authority: { index: 2, isWritable: false, value: input.authority ?? null },
  };

  // Arguments.
  const resolvedArgs: TransferTokensInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getTransferTokensInstructionDataSerializer().serialize(
    resolvedArgs as TransferTokensInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
