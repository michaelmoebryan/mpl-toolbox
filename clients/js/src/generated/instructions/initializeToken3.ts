/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type InitializeToken3InstructionAccounts = {
  account: PublicKey | Pda;
  mint: PublicKey | Pda;
};

// Data.
export type InitializeToken3InstructionData = {
  discriminator: number;
  owner: PublicKey;
};

export type InitializeToken3InstructionDataArgs = { owner: PublicKey };

export function getInitializeToken3InstructionDataSerializer(): Serializer<
  InitializeToken3InstructionDataArgs,
  InitializeToken3InstructionData
> {
  return mapSerializer<
    InitializeToken3InstructionDataArgs,
    any,
    InitializeToken3InstructionData
  >(
    struct<InitializeToken3InstructionData>(
      [
        ['discriminator', u8()],
        ['owner', publicKeySerializer()],
      ],
      { description: 'InitializeToken3InstructionData' }
    ),
    (value) => ({ ...value, discriminator: 18 })
  ) as Serializer<
    InitializeToken3InstructionDataArgs,
    InitializeToken3InstructionData
  >;
}

// Args.
export type InitializeToken3InstructionArgs =
  InitializeToken3InstructionDataArgs;

// Instruction.
export function initializeToken3(
  context: Pick<Context, 'programs'>,
  input: InitializeToken3InstructionAccounts & InitializeToken3InstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'splToken',
    'TTTXzBCbNAJ7sJZErBkpdsgLWgwgR9gx6tud8m34YXb'
  );

  // Accounts.
  const resolvedAccounts: ResolvedAccountsWithIndices = {
    account: { index: 0, isWritable: true, value: input.account ?? null },
    mint: { index: 1, isWritable: false, value: input.mint ?? null },
  };

  // Arguments.
  const resolvedArgs: InitializeToken3InstructionArgs = { ...input };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getInitializeToken3InstructionDataSerializer().serialize(
    resolvedArgs as InitializeToken3InstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
