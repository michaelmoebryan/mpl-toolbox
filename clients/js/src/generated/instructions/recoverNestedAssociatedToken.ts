/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type RecoverNestedAssociatedTokenInstructionAccounts = {
  nestedAssociatedAccountAddress: PublicKey | Pda;
  nestedTokenMintAddress: PublicKey | Pda;
  destinationAssociatedAccountAddress: PublicKey | Pda;
  ownerAssociatedAccountAddress: PublicKey | Pda;
  ownerTokenMintAddress: PublicKey | Pda;
  walletAddress: Signer;
  tokenProgram?: PublicKey | Pda;
};

// Instruction.
export function recoverNestedAssociatedToken(
  context: Pick<Context, 'programs'>,
  input: RecoverNestedAssociatedTokenInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'splAssociatedToken',
    'AAAbAgYqexzo3vo41zP5RWQDVNcEqeo9BjBhGTLvRRJe'
  );

  // Accounts.
  const resolvedAccounts: ResolvedAccountsWithIndices = {
    nestedAssociatedAccountAddress: {
      index: 0,
      isWritable: true,
      value: input.nestedAssociatedAccountAddress ?? null,
    },
    nestedTokenMintAddress: {
      index: 1,
      isWritable: false,
      value: input.nestedTokenMintAddress ?? null,
    },
    destinationAssociatedAccountAddress: {
      index: 2,
      isWritable: true,
      value: input.destinationAssociatedAccountAddress ?? null,
    },
    ownerAssociatedAccountAddress: {
      index: 3,
      isWritable: false,
      value: input.ownerAssociatedAccountAddress ?? null,
    },
    ownerTokenMintAddress: {
      index: 4,
      isWritable: false,
      value: input.ownerTokenMintAddress ?? null,
    },
    walletAddress: {
      index: 5,
      isWritable: true,
      value: input.walletAddress ?? null,
    },
    tokenProgram: {
      index: 6,
      isWritable: false,
      value: input.tokenProgram ?? null,
    },
  };

  // Default values.
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TTTXzBCbNAJ7sJZErBkpdsgLWgwgR9gx6tud8m34YXb'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = new Uint8Array();

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
